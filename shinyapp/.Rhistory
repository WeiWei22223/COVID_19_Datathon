if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I[lineNumber, 33] <- featureCounter
}
write.csv(Alk.I.P, "Revised_Alkylator.Proteosome inhibitor.csv")
Alk.P.I$Toxicity <- 0
AlkRmLine <- Alk.P.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I[lineNumber, 33] <- featureCounter
}
write.csv(Alk.P.I, "Revised_Alkylator.Proteosome inhibitor.csv")
Alk.P.I.S <- read.csv(file.choose(), na.strings = "NA")
Alk.P.I.S$Toxicity <- 0
AlkRmLine <- Alk.P.I.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I.S[lineNumber, 33] <- featureCounter
}
write.csv(Alk.P.I.S, "Revised_Alkylator.Proteosome inhibitor.Steroid.csv")
View(Alk.P.I.S)
Alk.P.I.S.T <- read.csv(file.choose(), na.strings = "NA")
# Alkylator.Proteosome inhibitor.Steroid.Topoisomerase inhibitor
Alk.P.I.S.T$Toxicity <- 0
AlkRmLine <- Alk.P.I.S.T[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I.S.T[lineNumber, 33] <- featureCounter
}
write.csv(Alk.P.I.S.T, "Revised_Alkylator.Proteosome inhibitor.Steroid.Topoisomerase inhibitor.csv")
Alk.S <- read.csv(file.choose(), na.strings = "NA")
Alk.S$Toxicity <- 0
AlkRmLine <- Alk.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.S[lineNumber, 33] <- featureCounter
}
write.csv(Alk.S, "Revised_Alkylator.Steroid.csv")
View(Alk.S)
Alk.S.T.I <- read.csv(file.choose(), na.strings = "NA")
Alk.S.T.I$Toxicity <- 0
AlkRmLine <- Alk.S.T.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.S.T.I[lineNumber, 33] <- featureCounter
}
write.csv(Alk.S.T.I, "Revised_Alkylator.Steroid.Topoisomerase inhibitor.csv")
Anti <- read.csv(file.choose(), na.strings = "NA")
# Anti-CD38
Anti$Toxicity <- 0
AlkRmLine <- Anti[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Anti[lineNumber, 33] <- featureCounter
}
write.csv(Anti, "Revised_Anti-CD38.csv")
Anti.S.T.I <- read.csv(file.choose(), na.strings = "NA")
# Antimicrotubular.Steroid.Topoisomerase inhibitor
Anti.S.T.I$Toxicity <- 0
AlkRmLine <- Anti.S.T.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Anti.S.T.I[lineNumber, 33] <- featureCounter
}
write.csv(Anti.S.T.I, "Revised_Antimicrotubular.Steroid.Topoisomerase inhibitor.csv")
Im <- read.csv(file.choose(), na.strings = "NA")
# Immunomodulatory
Im$Toxicity <- 0
AlkRmLine <- Im[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im[lineNumber, 33] <- featureCounter
}
write.csv(Im, "Revised_Immunomodulatory.csv")
Im.P.I <- read.csv(file.choose(), na.strings = "NA")
# Immunomodulatory.Proteosome inhibitor
Im.P.I$Toxicity <- 0
AlkRmLine <- Im.P.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im.P.I[lineNumber, 33] <- featureCounter
}
write.csv(Im.P.I, "Revised_Immunomodulatory.Proteosome inhibitor.csv")
Im.P.I.S <- read.csv(file.choose(), na.strings = "NA")
Im.P.I.S$Toxicity <- 0
AlkRmLine <- Im.P.I.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im.P.I.S[lineNumber, 33] <- featureCounter
}
write.csv(Im.P.I.S, "Revised_Immunomodulatory.Proteosome inhibitor.Steroid.csv")
Im.S <- read.csv(file.choose(), na.strings = "NA")
# Immunomodulatory.Steroid
Im.S$Toxicity <- 0
AlkRmLine <- Im.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im.S[lineNumber, 33] <- featureCounter
}
write.csv(Im.S, "Revised_Immunomodulatory.Steroid.csv")
ProIn <- read.csv(file.choose(), na.strings = "NA")
# Proteosome inhibitor
ProIn$Toxicity <- 0
AlkRmLine <- ProIn[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
ProIn[lineNumber, 33] <- featureCounter
}
write.csv(ProIn, "Revised_Proteosome inhibitor.csv")
ProIn.S.T <- read.csv(file.choose(), na.strings = "NA")
# Proteosome inhibitor.Steroid.Topoisomerase inhibitor
ProIn.S.T$Toxicity <- 0
AlkRmLine <- ProIn.S.T[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
ProIn.S.T[lineNumber, 33] <- featureCounter
}
write.csv(ProIn.S.T, "Revised_Proteosome inhibitor.Steroid.Topoisomerase inhibitor.csv")
StemCellTrans <- read.csv(file.choose(), na.strings = "NA")
# Stem Cell Transplant
StemCellTrans$Toxicity <- 0
AlkRmLine <- StemCellTrans[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
StemCellTrans[lineNumber, 33] <- featureCounter
}
write.csv(StemCellTrans, "Revised_Stem Cell Transplant.csv")
Steroid <- read.csv(file.choose(), na.strings = "NA")
# Steroid
Steroid$Toxicity <- 0
AlkRmLine <- Steroid[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Steroid[lineNumber, 33] <- featureCounter
}
write.csv(Steroid, "Revised_Steroid.csv")
library(lubridate)
lubridate::ymd("20190415")
mdy(04152019)
addNumbers <- function(x, y) {x + y}
addNumbers(3, 4)
getwd()
library(stringr)
library(shiny); runApp('F:/COURSES/INFO201/wee-final/trait_correlation.R')
shiny::runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
library(RJSONIO)
library(PKI) # Library only for publish
runApp('F:/COURSES/INFO201/wee-final')
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
library(highcharter)
library(DT)
original_data <- read.csv("data/olympic.csv", header = TRUE, stringsAsFactors = FALSE)
# Giving a dataset, the data_cleaning function will return a cleaned verison of the given dataset.
data_cleaning <- function(dataset) {
# Remove sports with few data
dataset <- dataset[dataset$Sport  !=  "Art Competitons" & dataset$Sport  !=  "Larcrosse"
& dataset$Sport  !=  "Golf", ]
# Remove non alphabetic character and non space character in team name(country)
dataset$Team <- gsub("(-[0-9]*)$", "", dataset$Team)
# Revise team name in order to match the country name for the map
dataset$Team <- replace(dataset$Team, dataset$Team == "United States", "United States of America")
dataset$Team <- replace(dataset$Team, dataset$Team == "Congo (Kinshasa)" | dataset$Team == "Congo (Brazzaville)", "Congo")
return(dataset)
}
olympic_data <- data_cleaning(na.omit(original_data))
with_nonmedal_record <- data_cleaning(original_data)
shiny::runApp('F:/COURSES/INFO201/wee-final')
?mtcars
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(rsample)     # data splitting
install.packages("rsample")
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
install.packages("rpart.plot")
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
install.packages("ipred")
library(ipred)       # bagging
library(caret)       # bagging
install.packages("caret")
library(AmesHousing)
install.packages("AmesHousing")
library(AmesHousing) # Testing dataset
set.seed(123)
View(make_ames())
ames_split <- initial_split(AmesHousing::make_ames(), prop = .7)
View(ames_split)
ames_train <- training(ames_split)
ames_test  <- testing(ames_split)
View(ames_train)
ames_test  <- testing(ames_split)
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
library(installr)
install.packages("installr")
library(installr)
updateR()
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
fig <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
fig
library(plotly)
fig <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
fig
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/covid/COVID_19_Datathon/shinyapp')
data <- read.csv("data/aggregated_state_data.csv", stringsAsFactors = FALSE)
getwd()
setwd("F:/datathon/covid/COVID_19_Datathon/shinyapp/")
data <- read.csv("data/aggregated_state_data.csv", stringsAsFactors = FALSE)
data <- data %>% filter(state == "Maharashtra" | state == "Delhi" | state == "Tamil Nadu" | state == "Gujarat")
runApp()
runApp()
runApp()
plot_ly(data, x=data$state, y=data$patients, type='bar', color = ~group)
plot_ly(data, x=data$state, y=data$patients, type='bar', color = data$state)
plot_ly(data, x=data$state, y=data$patients, type='bar', color=data$patients)
plot_ly(data, x=data$state, y=data$patients, type='bar')
%>% layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"))
plot_ly(data, x=data$state, y=data$patients, type='bar')
%>% layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"))
plot_ly(data, x=data$state, y=data$patients, type='bar') %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"))
runApp()
runApp()
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients') %>%
add_trace(y = data$female, name = 'female patients') %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender') %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients', color = I("blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("red")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender', color = I("gray")) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
runApp()
runApp()
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender',
color = I("gray"), text = data$patients, textposition = 'auto',) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender', color = I("gray"), text = data$patients, textposition = 'auto',) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender', color = I("gray"), text = data$patients, textposition = 'auto') %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
runApp()
runApp()
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
text = data$state + " has " + data$patients + " diagnosed COVID-19."
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender',
color = I("gray")) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
text = data$state + " has " + data$patients + " diagnosed COVID-19.",
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender',
color = I("gray")) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
text = "" + data$state + " has " + data$patients + " diagnosed COVID-19.",
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender',
color = I("gray")) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
plot_ly(data, x=data$state, y=data$male, type='bar', name = 'male patients',
text = paste0(data$state, " has ", data$patients, " diagnosed COVID-19."),
color = I("light blue")) %>%
add_trace(y = data$female, name = 'female patients', color = I("pink")) %>%
add_trace(y = (data$patients - data$female - data$male), name ='Unknown gender',
color = I("gray")) %>%
layout(title = "Total Amount of patients that test postive in COVID-19 in India",
xaxis = list(title = "States in India"),
yaxis = list(title = "Number of patients"),
barmode = "stack")
runApp()
# Deal with map data
state_map <- fromJSON("data/INDIA_STATES.json") %>% flatten(recursive = TRUE)
library(rjson)
install.packages("rjson")
library(rjson)
# Deal with map data
state_map <- fromJSON("data/INDIA_STATES.json") %>% flatten(recursive = TRUE)
# Deal with map data
state_map <- fromJSON("data/INDIA_STATES.json") %>% flatten(recursive = TRUE)
topoData <- readLines("data/INDIA_STATES.json") %>% paste(collapse = "\n")
leaflet() %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
library(leaflet)
leaflet() %>%
addTiles() %>%
addTopoJSON(topoData, weight = 1, color = "#444444", fill = FALSE)
topoData <- readLines("data/INDIA_STATES.json")
p <- file.path(work, "data/INDIA_STATES.json")
p <- file.path("data/INDIA_STATES.json")
json_data <- fromJSON(file = p)
leaflet() %>%
addTiles() %>%
addTopoJSON(json_data, weight = 1, color = "#444444", fill = FALSE)
leaflet(topoData) %>% addTiles()
json_data <- fromJSON(file = "data/INDIA_STATES.json")
json_data
leaflet(json_data) %>% addTiles()
json_data$type
json_data$features
f <- json_data$features
geojson <- readLines("data/india_states.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
geojson <- rgdal::readOGR("data/india_states.geojson")
geojson <- rgdal::readOGR("data/india_states.geojson")
leaflet(geojson) %>% addTiles()
leaflet() %>%
addTiles() %>%
addTopoJSON(geojson, weight = 1, color = "#444444", fill = FALSE)
