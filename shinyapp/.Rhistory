if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.I.P[lineNumber, 33] <- featureCounter
}
write.csv(Alk.I.P, "Revised_Alkylator.Immunomodulatory.Proteosome inhibitor.Steroid.Topoisomerase inhibitor.csv")
Alk.P.I <- read.csv(file.choose(), na.strings = "NA")
View(Alk.P.I)
Alk.P.I$Toxicity <- 0
AlkRmLine <- Alk.P.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I[lineNumber, 33] <- featureCounter
}
write.csv(Alk.I.P, "Revised_Alkylator.Proteosome inhibitor.csv")
Alk.P.I$Toxicity <- 0
AlkRmLine <- Alk.P.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I[lineNumber, 33] <- featureCounter
}
write.csv(Alk.P.I, "Revised_Alkylator.Proteosome inhibitor.csv")
Alk.P.I.S <- read.csv(file.choose(), na.strings = "NA")
Alk.P.I.S$Toxicity <- 0
AlkRmLine <- Alk.P.I.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I.S[lineNumber, 33] <- featureCounter
}
write.csv(Alk.P.I.S, "Revised_Alkylator.Proteosome inhibitor.Steroid.csv")
View(Alk.P.I.S)
Alk.P.I.S.T <- read.csv(file.choose(), na.strings = "NA")
# Alkylator.Proteosome inhibitor.Steroid.Topoisomerase inhibitor
Alk.P.I.S.T$Toxicity <- 0
AlkRmLine <- Alk.P.I.S.T[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.P.I.S.T[lineNumber, 33] <- featureCounter
}
write.csv(Alk.P.I.S.T, "Revised_Alkylator.Proteosome inhibitor.Steroid.Topoisomerase inhibitor.csv")
Alk.S <- read.csv(file.choose(), na.strings = "NA")
Alk.S$Toxicity <- 0
AlkRmLine <- Alk.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.S[lineNumber, 33] <- featureCounter
}
write.csv(Alk.S, "Revised_Alkylator.Steroid.csv")
View(Alk.S)
Alk.S.T.I <- read.csv(file.choose(), na.strings = "NA")
Alk.S.T.I$Toxicity <- 0
AlkRmLine <- Alk.S.T.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Alk.S.T.I[lineNumber, 33] <- featureCounter
}
write.csv(Alk.S.T.I, "Revised_Alkylator.Steroid.Topoisomerase inhibitor.csv")
Anti <- read.csv(file.choose(), na.strings = "NA")
# Anti-CD38
Anti$Toxicity <- 0
AlkRmLine <- Anti[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Anti[lineNumber, 33] <- featureCounter
}
write.csv(Anti, "Revised_Anti-CD38.csv")
Anti.S.T.I <- read.csv(file.choose(), na.strings = "NA")
# Antimicrotubular.Steroid.Topoisomerase inhibitor
Anti.S.T.I$Toxicity <- 0
AlkRmLine <- Anti.S.T.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Anti.S.T.I[lineNumber, 33] <- featureCounter
}
write.csv(Anti.S.T.I, "Revised_Antimicrotubular.Steroid.Topoisomerase inhibitor.csv")
Im <- read.csv(file.choose(), na.strings = "NA")
# Immunomodulatory
Im$Toxicity <- 0
AlkRmLine <- Im[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im[lineNumber, 33] <- featureCounter
}
write.csv(Im, "Revised_Immunomodulatory.csv")
Im.P.I <- read.csv(file.choose(), na.strings = "NA")
# Immunomodulatory.Proteosome inhibitor
Im.P.I$Toxicity <- 0
AlkRmLine <- Im.P.I[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im.P.I[lineNumber, 33] <- featureCounter
}
write.csv(Im.P.I, "Revised_Immunomodulatory.Proteosome inhibitor.csv")
Im.P.I.S <- read.csv(file.choose(), na.strings = "NA")
Im.P.I.S$Toxicity <- 0
AlkRmLine <- Im.P.I.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im.P.I.S[lineNumber, 33] <- featureCounter
}
write.csv(Im.P.I.S, "Revised_Immunomodulatory.Proteosome inhibitor.Steroid.csv")
Im.S <- read.csv(file.choose(), na.strings = "NA")
# Immunomodulatory.Steroid
Im.S$Toxicity <- 0
AlkRmLine <- Im.S[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Im.S[lineNumber, 33] <- featureCounter
}
write.csv(Im.S, "Revised_Immunomodulatory.Steroid.csv")
ProIn <- read.csv(file.choose(), na.strings = "NA")
# Proteosome inhibitor
ProIn$Toxicity <- 0
AlkRmLine <- ProIn[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
ProIn[lineNumber, 33] <- featureCounter
}
write.csv(ProIn, "Revised_Proteosome inhibitor.csv")
ProIn.S.T <- read.csv(file.choose(), na.strings = "NA")
# Proteosome inhibitor.Steroid.Topoisomerase inhibitor
ProIn.S.T$Toxicity <- 0
AlkRmLine <- ProIn.S.T[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
ProIn.S.T[lineNumber, 33] <- featureCounter
}
write.csv(ProIn.S.T, "Revised_Proteosome inhibitor.Steroid.Topoisomerase inhibitor.csv")
StemCellTrans <- read.csv(file.choose(), na.strings = "NA")
# Stem Cell Transplant
StemCellTrans$Toxicity <- 0
AlkRmLine <- StemCellTrans[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
StemCellTrans[lineNumber, 33] <- featureCounter
}
write.csv(StemCellTrans, "Revised_Stem Cell Transplant.csv")
Steroid <- read.csv(file.choose(), na.strings = "NA")
# Steroid
Steroid$Toxicity <- 0
AlkRmLine <- Steroid[,-c(13)]
for (lineNumber in 1:nrow(AlkRmLine)) {
featureCounter <- 0
for (columnNumber in 2:(ncol(AlkRmLine) - 1)) {
if (!is.na(AlkRmLine[lineNumber, columnNumber])) {
if (AlkRmLine[lineNumber, columnNumber] == 1) {
featureCounter = featureCounter + 1
}
}
}
Steroid[lineNumber, 33] <- featureCounter
}
write.csv(Steroid, "Revised_Steroid.csv")
library(lubridate)
lubridate::ymd("20190415")
mdy(04152019)
addNumbers <- function(x, y) {x + y}
addNumbers(3, 4)
getwd()
library(stringr)
library(shiny); runApp('F:/COURSES/INFO201/wee-final/trait_correlation.R')
shiny::runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
runApp('F:/COURSES/INFO201/wee-final')
library(RJSONIO)
library(PKI) # Library only for publish
runApp('F:/COURSES/INFO201/wee-final')
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
library(highcharter)
library(DT)
original_data <- read.csv("data/olympic.csv", header = TRUE, stringsAsFactors = FALSE)
# Giving a dataset, the data_cleaning function will return a cleaned verison of the given dataset.
data_cleaning <- function(dataset) {
# Remove sports with few data
dataset <- dataset[dataset$Sport  !=  "Art Competitons" & dataset$Sport  !=  "Larcrosse"
& dataset$Sport  !=  "Golf", ]
# Remove non alphabetic character and non space character in team name(country)
dataset$Team <- gsub("(-[0-9]*)$", "", dataset$Team)
# Revise team name in order to match the country name for the map
dataset$Team <- replace(dataset$Team, dataset$Team == "United States", "United States of America")
dataset$Team <- replace(dataset$Team, dataset$Team == "Congo (Kinshasa)" | dataset$Team == "Congo (Brazzaville)", "Congo")
return(dataset)
}
olympic_data <- data_cleaning(na.omit(original_data))
with_nonmedal_record <- data_cleaning(original_data)
shiny::runApp('F:/COURSES/INFO201/wee-final')
?mtcars
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(plotly)
library(plotly)
library(plotly)
library(rsample)     # data splitting
install.packages("rsample")
library(rsample)     # data splitting
library(dplyr)       # data wrangling
library(rpart)       # performing regression trees
library(rpart.plot)  # plotting regression trees
install.packages("rpart.plot")
library(rpart.plot)  # plotting regression trees
library(ipred)       # bagging
install.packages("ipred")
library(ipred)       # bagging
library(caret)       # bagging
install.packages("caret")
library(AmesHousing)
install.packages("AmesHousing")
library(AmesHousing) # Testing dataset
set.seed(123)
View(make_ames())
ames_split <- initial_split(AmesHousing::make_ames(), prop = .7)
View(ames_split)
ames_train <- training(ames_split)
ames_test  <- testing(ames_split)
View(ames_train)
ames_test  <- testing(ames_split)
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
library(installr)
install.packages("installr")
library(installr)
updateR()
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
fig <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
fig
library(plotly)
fig <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
fig
runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
shiny::runApp('F:/datathon/COVID_19_Datathon/shinyapp')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
getwd()
setwd("F:/datathon/covid/COVID_19_Datathon/shinyapp/")
library(sf)
library(shiny)
library(dplyr)
library(plotly)
library(leaflet)
library(geojsonsf)
# # Patient's data from all the state of India
# all_data <- read.csv("data/aggregated_state_data.csv", stringsAsFactors = FALSE)
# all_data <- all_data[order(all_data$state), ]
############# Block for trace plot for districts #######
districts_data = read.csv("data/districts_daily_may_15.csv")
Mumbai <- districts_data %>% filter(district == "Mumbai")
Chennai <- districts_data %>% filter(district == "Chennai")
Ahmadabad <- districts_data %>% filter(district == "Ahmadabad")
Delhi <- districts_data %>% filter(State == "Delhi")
date_list = Delhi$date
num_date_list = length(levels(districts_data$date))
num_date_ahm = length(Ahmadabad$date)
agg_active = numeric(num_date_list)
ahm_active = numeric(num_date_list)
# date_list[1]
for (k in 1:num_date_list) {
spec_day = Delhi %>% filter(date == date_list[k])
agg_active[k] <- sum(spec_day$active)
if (k > num_date_ahm) {
ahm_active[k] = NA
} else {
spec_ahm = Ahmadabad %>% filter(date == date_list[k])
ahm_active[k] = spec_ahm$active
}
}
##############
############## growth rate across country ############
agg_country_active <- numeric(num_date_list)
agg_country_confirmed <- numeric(num_date_list)
agg_country_recovered <- numeric(num_date_list)
agg_country_deceased <- numeric(num_date_list)
agg_country_net_active <- numeric(num_date_list)
agg_country_net_recovered <- numeric(num_date_list)
agg_country_net_deceased <- numeric(num_date_list)
for (k in 1:num_date_list) {
cur_day = districts_data %>% filter(date == date_list[k])
agg_country_confirmed[k] = sum(cur_day$confirmed)
agg_country_active[k] = sum(cur_day$active)
agg_country_recovered[k] = sum(cur_day$recovered)
agg_country_deceased[k] = sum(cur_day$deceased)
if (k == 1) {
agg_country_net_active[k] = NA
} else {
agg_country_net_active[k] = agg_country_active[k] - agg_country_active[k-1]
}
if (k == 1) {
agg_country_net_recovered[k] = NA
} else {
agg_country_net_recovered[k] = agg_country_recovered[k] - agg_country_recovered[k-1]
}
if (k == 1) {
agg_country_net_deceased[k] = NA
} else {
agg_country_net_deceased[k] = agg_country_deceased[k] - agg_country_deceased[k-1]
}
}
avg_active_net = mean(agg_country_net_active[2:26]/agg_country_active[1:25])
avg_recovered_net = mean(agg_country_net_recovered[2:26]/agg_country_recovered[1:25])
avg_deceased_net = mean(agg_country_net_deceased[2:26]/agg_country_deceased[1:25])
##################
################## cases for states and district across time ############
agg_area <- function(area,target, s_or_d) {
area_list = levels(area)
num_area = length(area_list)
mtx = data.frame(matrix(ncol = num_area, nrow = num_date_list))
row.names(mtx) = as.vector(levels(date_list))
colnames(mtx) = area_list
for (k in 1:num_date_list) {
cur_day = districts_data %>% filter(date == date_list[k])
for (j in 1:num_area) {
temp_area = area_list[j]
if (s_or_d == 0) {
cur_area = cur_day %>% filter(State == temp_area)
} else {
cur_area = cur_day %>% filter(district == temp_area)
}
if (target == 1) {
mtx[k,j] = sum(cur_area$confirmed)
} else if (target == 2) {
mtx[k,j] = sum(cur_area$active)
} else if (target == 3) {
mtx[k,j] = sum(cur_area$recovered)
} else {
mtx[k,j] = sum(cur_area$deceased)
}
}
}
return(mtx)
}
states_mtx_confirmed = agg_area(districts_data$State, 1, 0)
states_mtx_active = agg_area(districts_data$State, 2, 0)
states_mtx_recovered = agg_area(districts_data$State, 3, 0)
states_mtx_deceased = agg_area(districts_data$State, 4, 0)
district_mtx_confirmed = agg_area(districts_data$district, 1, 1)
district_mtx_active = agg_area(districts_data$district, 2, 1)
district_mtx_recovered = agg_area(districts_data$district, 3, 1)
district_mtx_deceased = agg_area(districts_data$district, 4, 1)
##################
# select total active cases at state level
total_active_state <- states_mtx_active[nrow(states_mtx_active), ]
total_active_state <- t(total_active_state)
total_active_state <- data.frame(total_active_state)
total_active_state <- tibble::rownames_to_column(total_active_state, "state")
names(total_active_state)[1] <- "state"
names(total_active_state)[2] <- "patients"
# Patient's data from 4 specific states
active_state_4 <- total_active_state %>% filter(state == "Maharashtra" | state == "Delhi" | state == "Tamil Nadu" | state == "Gujarat")
# Read in the Inidan state map file
backup <- rgdal::readOGR("data/india_states.geojson")
# Combine map data with patient's data
backup@data$patients <- 0
for (i in 1:nrow(total_active_state)) {
for (j in 1:nrow(backup@data)) {
if (total_active_state$state[i] == backup@data$NAME_1[j]) {
backup@data$patients[j] <- total_active_state$patients[i]
}
}
}
# Create a color palette for the map:
mypalette <- colorNumeric(palette="magma", domain=backup@data$patients,
na.color="transparent")
mypalette(c(45,43))
# Labels for choropleths
labels <- sprintf("<strong>%s</strong><br/>count: %g",
backup@data$NAME_1, backup@data$patients) %>%
lapply(htmltools::HTML)
